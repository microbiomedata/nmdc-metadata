type Activity
  {
    id: String!
    name: String
    type: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    used: String
  }

type Agent
  {
    actedOnBehalfOf: Agent
    wasInformedBy: Activity
  }

type AttributeValue
  {
    hasRawValue: String
    wasGeneratedBy: Activity
  }

type Biosample
  {
    description: String
    envPackage: TextValue
    latLon: GeolocationValue!
    geoLocName: TextValue
    collectionDate: TimestampValue
    envBroadScale: ControlledTermValue!
    envLocalScale: ControlledTermValue!
    envMedium: ControlledTermValue!
    ecosystem: AttributeValue
    ecosystemCategory: AttributeValue
    ecosystemType: AttributeValue
    ecosystemSubtype: AttributeValue
    specificEcosystem: AttributeValue
    depth: QuantityValue
    totOrgCarb: QuantityValue
    alt: QuantityValue
    elev: QuantityValue
    salinity: QuantityValue
    dissOxygen: QuantityValue
    nitrate: QuantityValue
    chlorophyll: QuantityValue
    curLandUse: TextValue
    curVegetation: TextValue
    curVegetationMeth: TextValue
    previousLandUse: TextValue
    previousLandUseMeth: TextValue
    cropRotation: TextValue
    agrochemAddition: QuantityValue
    tillage: TextValue
    fire: TimestampValue
    flooding: TimestampValue
    extremeEvent: TimestampValue
    horizon: TextValue
    horizonMeth: TextValue
    sieving: QuantityValue
    waterContent: QuantityValue
    waterContentSoilMeth: TextValue
    sampVolWeDnaExt: QuantityValue
    poolDnaExtracts: TextValue
    storeCond: TextValue
    linkClimateInfo: TextValue
    seasonTemp: QuantityValue
    annualTemp: QuantityValue
    seasonPrecpt: QuantityValue
    annualPrecpt: QuantityValue
    linkClassInfo: TextValue
    faoClass: TextValue
    localClass: TextValue
    localClassMeth: TextValue
    soilType: TextValue
    soilTypeMeth: TextValue
    slopeGradient: QuantityValue
    slopeAspect: QuantityValue
    profilePosition: TextValue
    drainageClass: TextValue
    texture: QuantityValue
    textureMeth: TextValue
    phMeth: TextValue
    totOrgCMeth: TextValue
    totNitroContent: QuantityValue
    totNitroContentMeth: TextValue
    microbialBiomass: QuantityValue
    microbialBiomassMeth: TextValue
    linkAdditAnalys: TextValue
    salinityMeth: TextValue
    heavyMetals: QuantityValue
    heavyMetalsMeth: TextValue
    alSat: QuantityValue
    alSatMeth: TextValue
    miscParam: QuantityValue
    id: String!
    name: String
    alternateIdentifiers: [String]
    type: String
  }

type BiosampleProcessing
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
    hasInput: [Biosample]
  }

type BooleanValue
  {
    hasRawValue: String
    wasGeneratedBy: Activity
    hasBooleanValue: Boolean
  }

type ChemicalEntity
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
    inchi: String
    inchiKey: String
    smiles: [String]
    chemicalFormula: String
  }

type ControlledTermValue
  {
    hasRawValue: String
    wasGeneratedBy: Activity
    term: OntologyClass
  }

type DataObject
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
    fileSizeBytes: Bytes
    md5Checksum: String
    dataObjectType: ControlledTermValue
    compressionType: String
    wasGeneratedBy: WorkflowExecutionActivity
    url: String
    type: String
  }

type Database
  {
    biosampleSet: [Biosample]
    studySet: [Study]
    dataObjectSet: [DataObject]
    activitySet: [WorkflowExecutionActivity]
    magsActivitySet: [MAGsAnalysisActivity]
    metabolomicsAnalysisActivitySet: [MetabolomicsAnalysisActivity]
    nomAnalysisActivitySet: [NomAnalysisActivity]
    omicsProcessingSet: [OmicsProcessing]
    functionalAnnotationSet: [FunctionalAnnotation]
    genomeFeatureSet: [GenomeFeature]
  }

type EnvironmentalMaterialTerm
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
  }

type FunctionalAnnotation
  {
    type: String
    wasGeneratedBy: MetagenomeAnnotationActivity
    subject: GeneProduct
    hasFunction: FunctionalAnnotationTerm
  }

interface FunctionalAnnotationTerm
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
  }

type GeneProduct
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
  }

type GenomeFeature
  {
    seqid: String!
    type: OntologyClass
    start: Integer!
    end: Integer!
    strand: String
    phase: Integer
    encodes: GeneProduct
  }

type GeolocationValue
  {
    wasGeneratedBy: Activity
    latitude: DecimalDegree
    longitude: DecimalDegree
    hasRawValue: String
  }

type Instrument
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
  }

type IntegerValue
  {
    hasRawValue: String
    wasGeneratedBy: Activity
    hasNumericValue: Float
  }

type MAGBin
  {
    binName: String
    numberOfContig: Integer
    completeness: Float
    contamination: Float
    geneCount: Integer
    binQuality: String
    num16s: Integer
    num5s: Integer
    num23s: Integer
    numTRNA: Integer
    gtdbtkDomain: String
    gtdbtkPhylum: String
    gtdbtkClass: String
    gtdbtkOrder: String
    gtdbtkFamily: String
    gtdbtkGenus: String
    gtdbtkSpecies: String
    type: String
  }

type MAGsAnalysisActivity
  {
    id: String!
    name: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    used: String
    executionResource: String
    gitUrl: String
    hasInput: [String]
    hasOutput: [String]
    type: String
    inputContigNum: Integer
    binnedContigNum: Integer
    tooShortContigNum: Integer
    lowDepthContigNum: Integer
    unbinnedContigNum: Integer
    magsList: [MAGBin]
  }

type MetaboliteQuantification
  {
    metaboliteQuantified: ChemicalEntity
    highestSimilarityScore: Float
  }

type MetabolomicsAnalysisActivity
  {
    id: String!
    name: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    executionResource: String
    gitUrl: String
    hasInput: [String]
    hasOutput: [String]
    type: String
    used: Instrument
    hasMetaboliteQuantifications: [MetaboliteQuantification]
  }

type MetagenomeAnnotationActivity
  {
    id: String!
    name: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    used: String
    executionResource: String
    gitUrl: String
    hasInput: [String]
    hasOutput: [String]
    type: String
  }

type MetagenomeAssembly
  {
    id: String!
    name: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    used: String
    executionResource: String
    gitUrl: String
    hasInput: [String]
    hasOutput: [String]
    type: String
    asmScore: Float
    scaffolds: Float
    scafLogsum: Float
    scafPowsum: Float
    scafMax: Float
    scafBp: Float
    scafN50: Float
    scafN90: Float
    scafL50: Float
    scafL90: Float
    scafNGt50K: Float
    scafLGt50K: Float
    scafPctGt50K: Float
    contigs: Float
    contigBp: Float
    ctgN50: Float
    ctgL50: Float
    ctgN90: Float
    ctgL90: Float
    ctgLogsum: Float
    ctgPowsum: Float
    ctgMax: Float
    gapPct: Float
    gcStd: Float
    gcAvg: Float
    numInputReads: Float
    numAlignedReads: Float
  }

type MetaproteomicsAnalysisActivity
  {
    id: String!
    name: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    executionResource: String
    gitUrl: String
    hasInput: [String]
    hasOutput: [String]
    type: String
    used: Instrument
    hasPeptideQuantifications: [PeptideQuantification]
  }

interface NamedThing
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
  }

type NomAnalysisActivity
  {
    id: String!
    name: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    executionResource: String
    gitUrl: String
    hasInput: [String]
    hasOutput: [String]
    type: String
    used: Instrument
    hasCalibration: String
  }

type OmicsProcessing
  {
    description: String
    hasInput: [Biosample]
    partOf: [Study]
    hasOutput: [DataObject]
    omicsType: ControlledTermValue
    id: String!
    name: String
    alternateIdentifiers: [String]
    type: String
  }

type OntologyClass
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
  }

type OrthologyGroup
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
  }

type Pathway
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
    hasPart: [Reaction]
  }

type PeptideQuantification
  {
    peptideSequence: String
    bestProtein: GeneProduct
    allProteins: [GeneProduct]
    minQValue: Float
    peptideSpectralCount: Integer
    peptideSumMasicAbundance: Integer
  }

type Person
  {
    name: String
    description: String
    alternateIdentifiers: [String]
    id: String!
  }

type PersonValue
  {
    wasGeneratedBy: Activity
    orcid: String
    hasRawValue: String
  }

type ProteinQuantification
  {
    bestProtein: GeneProduct
    allProteins: [GeneProduct]
    peptideSequenceCount: Integer
    proteinSpectralCount: Integer
    proteinSumMasicAbundance: Integer
  }

type QuantityValue
  {
    wasGeneratedBy: Activity
    hasUnit: Unit
    hasNumericValue: Double
    hasRawValue: String
  }

type Reaction
  {
    id: String!
    name: String
    description: String
    alternateIdentifiers: [String]
    leftParticipants: [ReactionParticipant]
    rightParticipants: [ReactionParticipant]
    direction: String
    smartsString: String
    isDiastereoselective: Boolean
    isStereo: Boolean
    isBalanced: Boolean
    isTransport: Boolean
    isFullyCharacterized: Boolean
  }

type ReactionParticipant
  {
    chemical: ChemicalEntity
    stoichiometry: Integer
  }

type ReadBasedAnalysisActivity
  {
    id: String!
    name: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    used: String
    executionResource: String
    gitUrl: String
    hasInput: [String]
    hasOutput: [String]
    type: String
  }

type ReadQCAnalysisActivity
  {
    id: String!
    name: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    used: String
    executionResource: String
    gitUrl: String
    hasInput: [String]
    hasOutput: [String]
    type: String
    inputReadCount: Float
    inputBaseCount: Float
    outputReadCount: Float
    outputBaseCount: Float
  }

type Study
  {
    description: String
    ecosystem: AttributeValue
    ecosystemCategory: AttributeValue
    ecosystemType: AttributeValue
    ecosystemSubtype: AttributeValue
    specificEcosystem: AttributeValue
    principalInvestigator: PersonValue
    doi: AttributeValue
    id: String!
    name: String
    alternateIdentifiers: [String]
  }

type TextValue
  {
    hasRawValue: String
    wasGeneratedBy: Activity
    language: LanguageCode
  }

type TimestampValue
  {
    hasRawValue: String
    wasGeneratedBy: Activity
  }

type UrlValue
  {
    hasRawValue: String
    wasGeneratedBy: Activity
  }

type WorkflowExecutionActivity
  {
    id: String!
    name: String
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    used: String
    executionResource: String
    gitUrl: String
    hasInput: [String]
    hasOutput: [String]
    type: String
  }


